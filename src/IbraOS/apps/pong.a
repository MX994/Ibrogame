@ General game structure:
@ game state consists of four sets of locals:
@ (paddle x, paddle y)
@  paddle velocity
@ (ball x, ball y)
@ (ball x vel, ball y vel)

@ initialize game state
_gamestart:
    @ draw paddle
    moveri 0, 120   @ x
    moveri 1, 240   @ y
    moveri 2, 100   @ w
    moveri 3, 50    @ h
    moveri 4, 99    @ I forget what this is for
    syscall 2       @ draw

    @ draw ball
    moveri 0, 200   @ x
    moveri 1, 320   @ y
    moveri 2, 25    @ w
    moveri 3, 25    @ h
    moveri 4, 99    @ surprise tool for later :) (idk what this is)
    syscall 2       @ draw

_gameloop:
    while(ball is in bounds) {
        check if ball is out of bounds
        see what directions the joystick was pressed in
        move ball based on directions

        check if ball is out of bounds
        check if ball collides with paddle 
    }

    @ check to see if game is over
    @ game over means ball has left playing area, i.e. off the top
    cmpri <ball y register>, GT, 240
    cjump GT, <offset to _gameend>

    xorrr <paddle x vel reg>, <paddle x vel reg>    @ set stuff to zero
    xorrr <paddle y vel reg>, <paddle y vel reg>    @ set stuff to zero 
    @ get input from joystick x and y
    @ if input is yes, set corresponding velocity to 10
    @ add x, y vel to x, y pos

    @ move ball in direction it is currently bouncing
    @ this means add x, y vel to x, y pos

    @check for collision (I'll get back to you on the math for this)




_gameend:
  @ either reset game or back to boot menu
  jump _gameloop
